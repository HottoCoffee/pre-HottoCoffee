name: Backend build check

on:
  pull_request:
    paths:
      - 'backend/go/**'
  push:
    branches:
      - main
  workflow_dispatch:

defaults:
  run:
    working-directory: ./backend/go

jobs:
  check-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: ./backend/go/go.mod
          cache-dependency-path: ./backend/go/go.sum
      - name: Check format
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: test -z $(gofmt -l .)
      - name: Test and collect coverage
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: go test ./... -short -race -covermode=atomic -coverprofile=coverage.txt
      - name: Test
        if: ${{ matrix.os != 'ubuntu-latest' }}
        run: go test ./... -short -race
      - name: Build
        run: go build
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: check-build
    # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: ./backend/go/go.mod
          cache-dependency-path: ./backend/go/go.sum
      - name: Build
        run: go build

      - name: AWS CLI install
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version
      - name: AWS set Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Deploy
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

          echo ${{ secrets.DEPLOY_KEY }} > deploy_key
          chmod 600 deploy_key
          scp -i deploy_key -o StrictHostKeyChecking=no ./HottoCoffee ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_DIR }}

          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
